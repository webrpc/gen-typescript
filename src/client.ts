/* eslint-disable */
// Test v0.0.1 6c33a774292fbba6cb0b33bc47db01c4c34343e0
// --
// Code generated by webrpc-gen@v0.8.3 with typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=/home/lukasjenicek/Development/webrpc/gen-typescript/bin/api.ridl -target=typescript -client -out=/home/lukasjenicek/Development/webrpc/gen-typescript/src/client.ts

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "v0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "6c33a774292fbba6cb0b33bc47db01c4c34343e0"

//
// Types
//
export enum Status {
  AVAILABLE = 'AVAILABLE',
  NOT_AVAILABLE = 'NOT_AVAILABLE'
}

export interface Empty {
}

export interface User {
  id: number
  USERNAME: string
  role: string
}

export interface ComplexType {
  meta: {[key: string]: any}
  metaNestedExample: {[key: string]: {[key: string]: number}}
  namesList: Array<string>
  numsList: Array<number>
  doubleArray: Array<Array<string>>
  listOfMaps: Array<{[key: string]: number}>
  listOfUsers: Array<User>
  mapOfUsers: {[key: string]: User}
  user: User
  enum: Status
}

export interface ComplexApi {
  getComplex(headers?: object): Promise<GetComplexReturn>
  sendComplex(args: SendComplexArgs, headers?: object): Promise<SendComplexReturn>
}

export interface GetComplexArgs {
}

export interface GetComplexReturn {
  complex: ComplexType  
}
export interface SendComplexArgs {
  complex: ComplexType
}

export interface SendComplexReturn {  
}

export interface ErrorApi {
  getError(headers?: object): Promise<GetErrorReturn>
}

export interface GetErrorArgs {
}

export interface GetErrorReturn {
  empty: Empty  
}


  
//
// Client
//
export class ComplexApi implements ComplexApi {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/ComplexApi/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  getComplex = (headers?: object): Promise<GetComplexReturn> => {
    return this.fetch(
      this.url('GetComplex'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          complex: <ComplexType>(_data.complex)
        }
      })
    })
  }
  
  sendComplex = (args: SendComplexArgs, headers?: object): Promise<SendComplexReturn> => {
    return this.fetch(
      this.url('SendComplex'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        }
      })
    })
  }
  
}

export class ErrorApi implements ErrorApi {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/ErrorApi/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  getError = (headers?: object): Promise<GetErrorReturn> => {
    return this.fetch(
      this.url('GetError'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          empty: <Empty>(_data.empty)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
