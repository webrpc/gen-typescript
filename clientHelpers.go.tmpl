{{define "clientHelpers"}}
{{- $webrpcErrors := .WebrpcErrors -}}
{{- $schemaErrors := .SchemaErrors -}}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw new WebrpcError('WebrpcBadResponse', res.status, `expected JSON object but got: '${text}'`)
    }
    if (!res.ok) {
      if (data.code && typeof data.code === 'number') {
        const err = rpcErrorsByCode[data.code] as any
        if (err && err.throwError) {
          err.throwError(data)
        }
      }
      if (data.message) {
        WebrpcError.throwError(data)
      } else {
        throw data // unknown payload
      }
    }
    return data
  })
}

//
// Errors
//

export class WebrpcError extends Error {
  name: string
  code: number
  message: string
  cause?: string

  constructor(name: string, code: number, message: string, cause?: string) {
    super(message)
    this.name = name || 'WebrpcError'
    this.code = code || 0
    this.message = message
    this.cause = cause
    Object.setPrototypeOf(this, WebrpcError.prototype)
  }

  static throwError(payload: any) {
    throw new this(payload.error, payload.code, payload.message, payload.cause)
  }
}

// Webrpc errors
{{- range $_, $error := $webrpcErrors}}
export class {{$error.Name}}Error extends WebrpcError {
  constructor(
    name: string = '{{$error.Name}}',
    code: number = {{$error.Code}},
    message: string = '{{$error.Message}}',
    cause?: string
  ) {
    super(name, code, message, cause)
    Object.setPrototypeOf(this, {{$error.Name}}Error.prototype)
  }
}
{{ end }}

// Schema errors
{{- range $_, $error := $schemaErrors}}
export class {{$error.Name}}Error extends WebrpcError {
  constructor(
    name: string = '{{$error.Name}}',
    code: number = {{$error.Code}},
    message: string = '{{$error.Message}}',
    cause?: string
  ) {
    super(name, code, message, cause)
    Object.setPrototypeOf(this, {{$error.Name}}Error.prototype)
  }
}

{{ end -}}

export enum errors {
{{- range $_, $error := $webrpcErrors}}
  {{$error.Name}} = '{{$error.Name}}',
{{- end}}
{{- range $_, $error := $schemaErrors}}
  {{$error.Name}} = '{{$error.Name}}',
{{- end}}
}

const rpcErrorsByCode: { [code: number]: any } = {
{{- range $_, $error := $webrpcErrors}}
  '{{$error.Code}}': {{$error.Name}}Error,
{{- end }}
{{- range $_, $error := $schemaErrors}}
  '{{$error.Code}}': {{$error.Name}}Error,
{{- end }}
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
{{end}}
