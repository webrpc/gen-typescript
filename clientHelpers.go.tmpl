{{define "clientHelpers"}}
interface WebrpcErrorOptions {
  code: number;
  error: string;
  msg: string;
  status: number;
  cause?: string;
}

export class WebrpcError extends Error {
  constructor(message: string, public options: WebrpcErrorOptions) {
    super(message);
    Object.setPrototypeOf(this, WebrpcError.prototype);
  }
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw new WebrpcError("bad response", { code: -5, error: 'WebrpcBadResponse', status: res.status, cause: new Error(`expecting JSON, got: ${text}`)})
    }
    if (!res.ok) {
      throw new WebrpcError(data.msg, { code: data.code || 0, error: data.error || 'WebrpcServerError', status: res.status, cause: data.cause ? new Error(data.cause): undefined })
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
{{end}}
