/* eslint-disable */
// node-ts v1.0.0 21701cae51b73d035bf2180831cdb38220bbbccc
// --
// Code generated by webrpc-gen@v0.28.1-1-ge2b37ad with ../../../gen-typescript generator. DO NOT EDIT.
//
// webrpc-gen -schema=service.ridl -target=../../../gen-typescript -server -out=./server/server.gen.ts

// Webrpc description and code-gen version
export const WebrpcVersion = "v1"

// Schema version of your RIDL schema
export const WebrpcSchemaVersion = "v1.0.0"

// Schema hash generated from your RIDL schema
export const WebrpcSchemaHash = "21701cae51b73d035bf2180831cdb38220bbbccc"


//
// Server interface
//

// Generic server interface accepting a user-defined context object C which
// will be provided as the first argument to every RPC handler.
export interface ExampleServer<Context = unknown> {
  ping(ctx: Context, req: PingRequest): Promise<PingResponse>
  getUser(ctx: Context, req: GetUserRequest): Promise<GetUserResponse>
  getArticle(ctx: Context, req: GetArticleRequest): Promise<GetArticleResponse>
}

//
// Types
//

export enum Kind {
  USER = 'USER',
  ADMIN = 'ADMIN'
}

export interface User {
  id: number
  USERNAME: string
  role: Kind
  meta: { [key: string]: any }
  createdAt?: string
}

export interface Page {
  num: number
}

export interface GetArticleRequest {
  articleId: number
}

export interface GetArticleResponse {
  title: string
  content?: string
}

// TODO: lets switch to names.. Request and Response suffixes ..? .. but maybe it'll break a lot of apps?
// consider adding a flag here for it..? at generation time.. like --compat mode ..

export interface PingRequest {
}

export interface PingResponse {
}

export interface GetUserRequest {
  userId: number
}

export interface GetUserResponse {
  code: number
  user: User
}

// export interface GetArticleArgs {
//   getArticleRequest: GetArticleRequest
// }

// export interface GetArticleReturn {
//   getArticleResponse: GetArticleResponse  
// }


//
// Server handler
//

export const serveExampleRpc = async <Context>(service: ExampleServer<Context>, ctx: Context, urlPath: string, body: any) => {
  if (!urlPath.startsWith('/rpc/')) return null
  const parts = urlPath.split('/').filter(Boolean)
  if (parts.length !== 3 || parts[0] !== 'rpc' || parts[1] !== 'Example') return null
  const method = parts[2]
  try {
    const result = await dispatchExampleRequest(service, ctx, method, body)
    return {
      method,
      status: 200,
      headers: { [WebrpcHeader]: WebrpcHeaderValue, 'Content-Type': 'application/json' },
      body: result ?? {}
    }
  } catch (err: any) {
    if (err instanceof WebrpcError) {
      const status = err.status || 400
      return {
        method,
        status,
        headers: { [WebrpcHeader]: WebrpcHeaderValue, 'Content-Type': 'application/json' },
        body: err
      }
    } else {
      return {
        method,
        status: 400,
        headers: { [WebrpcHeader]: WebrpcHeaderValue, 'Content-Type': 'application/json' },
        body: new WebrpcError({ message: err?.message })
      }
    }
  }
}

const dispatchExampleRequest = async <Context>(service: ExampleServer<Context>, ctx: Context, method: string, payload: any) => {
  switch (method) {
    case 'Ping':
      return service.ping(ctx, payload || {})
    case 'GetUser':
      if (!('userId' in payload)) {
        throw new WebrpcError({ cause: "Missing argument `userId`" })
      }
      if ('userId' in payload && !validateType(payload['userId'], 'number')) {
        throw new WebrpcError({ cause: "Invalid argument: userId" })
      }
      return await service.getUser(ctx, payload || {})
    case 'GetArticle':
      if (!('articleId' in payload)) {
        throw new WebrpcError({ cause: "Missing argument `articleId`" })
      }
      if ('articleId' in payload && !validateType(payload['articleId'], 'number')) {
        throw new WebrpcError({ cause: "Invalid argument: articleId" })
      }
      return service.getArticle(ctx, payload || {})
    default:
      throw new WebrpcBadRouteError({ cause: 'Method not found' })
  }
}

//
// Errors
//

type WebrpcErrorParams = { name?: string, code?: number, message?: string, status?: number, cause?: string }

export class WebrpcError extends Error {
  name: string
  code: number
  message: string
  status: number
  cause?: string

  constructor(error: WebrpcErrorParams = {}) {
    super(error.message)
    this.name = error.name || 'WebrpcError'
    this.code = typeof error.code === 'number' ? error.code : 0
    this.message = error.message || `endpoint error ${this.code}`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcError.prototype)
  }

  static new(payload: any): WebrpcError {
    return new this({ message: payload.message, code: payload.code, status: payload.status, cause: payload.cause })
  }
}

export class WebrpcEndpointError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcEndpoint'
    this.code = typeof error.code === 'number' ? error.code : 0
    this.message = error.message || `endpoint error ${this.code}`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcEndpointError.prototype)
  }
}

export class WebrpcRequestFailedError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcRequestFailed'
    this.code = typeof error.code === 'number' ? error.code : -1
    this.message = error.message || `endpoint error ${this.code}`
    this.status = typeof error.status === 'number' ? error.status : 400
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcRequestFailedError.prototype)
  }
}

export class WebrpcBadRouteError extends WebrpcError {
  constructor(error: WebrpcErrorParams = {}) {
    super(error)
    this.name = error.name || 'WebrpcBadRoute'
    this.code = typeof error.code === 'number' ? error.code : -2
    this.message = error.message || `bad route`
    this.status = typeof error.status === 'number' ? error.status : 404
    this.cause = error.cause
    Object.setPrototypeOf(this, WebrpcBadRouteError.prototype)
  }
}

// export class WebrpcBadMethodError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcBadMethod',
//     status: number = 405,
//     code: number = -3,
//     message: string = `bad method`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcBadMethodError.prototype)
//   }
// }

// export class WebrpcBadRequestError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcBadRequest',
//     status: number = 400,
//     code: number = -4,
//     message: string = `bad request`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcBadRequestError.prototype)
//   }
// }

// export class WebrpcBadResponseError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcBadResponse',
//     status: number = 500,
//     code: number = -5,
//     message: string = `bad response`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcBadResponseError.prototype)
//   }
// }

// export class WebrpcServerPanicError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcServerPanic',
//     status: number = 500,
//     code: number = -6,
//     message: string = `server panic`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcServerPanicError.prototype)
//   }
// }

// export class WebrpcInternalErrorError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcInternalError',
//     status: number = 500,
//     code: number = -7,
//     message: string = `internal error`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcInternalErrorError.prototype)
//   }
// }

// export class WebrpcClientAbortedError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcClientAborted',
//     status: number = 400,
//     code: number = -8,
//     message: string = `request aborted by client`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcClientAbortedError.prototype)
//   }
// }

// export class WebrpcStreamLostError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcStreamLost',
//     status: number = 400,
//     code: number = -9,
//     message: string = `stream lost`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcStreamLostError.prototype)
//   }
// }

// export class WebrpcStreamFinishedError extends WebrpcError {
//   constructor(
//     name: string = 'WebrpcStreamFinished',
//     status: number = 200,
//     code: number = -10,
//     message: string = `stream finished`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, WebrpcStreamFinishedError.prototype)
//   }
// }


// // Schema errors

// export class UnauthorizedError extends WebrpcError {
//   constructor(
//     name: string = 'Unauthorized',
//     status: number = 401,
//     code: number = 1000,
//     message: string = `Unauthorized access`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, UnauthorizedError.prototype)
//   }
// }

// export class PermissionDeniedError extends WebrpcError {
//   constructor(
//     name: string = 'PermissionDenied',
//     status: number = 403,
//     code: number = 1001,
//     message: string = `Permission denied`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, PermissionDeniedError.prototype)
//   }
// }

// export class SessionExpiredError extends WebrpcError {
//   constructor(
//     name: string = 'SessionExpired',
//     status: number = 403,
//     code: number = 1002,
//     message: string = `Session expired`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, SessionExpiredError.prototype)
//   }
// }

// export class GeoblockedError extends WebrpcError {
//   constructor(
//     name: string = 'Geoblocked',
//     status: number = 451,
//     code: number = 1003,
//     message: string = `Geoblocked region`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, GeoblockedError.prototype)
//   }
// }

// export class RateLimitedError extends WebrpcError {
//   constructor(
//     name: string = 'RateLimited',
//     status: number = 429,
//     code: number = 1004,
//     message: string = `Rate-limited. Please slow down.`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, RateLimitedError.prototype)
//   }
// }

// export class CorsDisallowedError extends WebrpcError {
//   constructor(
//     name: string = 'CorsDisallowed',
//     status: number = 403,
//     code: number = 1005,
//     message: string = `CORS disallowed. JWT can't be used from a web app.`,
//     cause?: string
//   ) {
//     super(name, status, code, message, cause)
//     Object.setPrototypeOf(this, CorsDisallowedError.prototype)
//   }
// }


export enum errors {
  WebrpcEndpoint = 'WebrpcEndpoint',
  WebrpcRequestFailed = 'WebrpcRequestFailed',
  WebrpcBadRoute = 'WebrpcBadRoute',
  WebrpcBadMethod = 'WebrpcBadMethod',
  WebrpcBadRequest = 'WebrpcBadRequest',
  WebrpcBadResponse = 'WebrpcBadResponse',
  WebrpcServerPanic = 'WebrpcServerPanic',
  WebrpcInternalError = 'WebrpcInternalError',
  WebrpcClientAborted = 'WebrpcClientAborted',
  WebrpcStreamLost = 'WebrpcStreamLost',
  WebrpcStreamFinished = 'WebrpcStreamFinished',
  Unauthorized = 'Unauthorized',
  PermissionDenied = 'PermissionDenied',
  SessionExpired = 'SessionExpired',
  Geoblocked = 'Geoblocked',
  RateLimited = 'RateLimited',
  CorsDisallowed = 'CorsDisallowed',
}

export enum WebrpcErrorCodes {
  WebrpcEndpoint = 0,
  WebrpcRequestFailed = -1,
  WebrpcBadRoute = -2,
  WebrpcBadMethod = -3,
  WebrpcBadRequest = -4,
  WebrpcBadResponse = -5,
  WebrpcServerPanic = -6,
  WebrpcInternalError = -7,
  WebrpcClientAborted = -8,
  WebrpcStreamLost = -9,
  WebrpcStreamFinished = -10,
  Unauthorized = 1000,
  PermissionDenied = 1001,
  SessionExpired = 1002,
  Geoblocked = 1003,
  RateLimited = 1004,
  CorsDisallowed = 1005,
}

export const webrpcErrorByCode: { [code: number]: any } = {
  [0]: WebrpcEndpointError,
  [-1]: WebrpcRequestFailedError,
  // [-2]: WebrpcBadRouteError,
  // [-3]: WebrpcBadMethodError,
  // [-4]: WebrpcBadRequestError,
  // [-5]: WebrpcBadResponseError,
  // [-6]: WebrpcServerPanicError,
  // [-7]: WebrpcInternalErrorError,
  // [-8]: WebrpcClientAbortedError,
  // [-9]: WebrpcStreamLostError,
  // [-10]: WebrpcStreamFinishedError,
  // [1000]: UnauthorizedError,
  // [1001]: PermissionDeniedError,
  // [1002]: SessionExpiredError,
  // [1003]: GeoblockedError,
  // [1004]: RateLimitedError,
  // [1005]: CorsDisallowedError,
}

//
// MISC
//

const JS_TYPES = [
  "bigint",
  "boolean",
  "function",
  "number",
  "object",
  "string",
  "symbol",
  "undefined"
]

const validateKind = (value: any) => {
  if (!("USER" in value) || !validateType(value["USER"], "number")) {
    return false
  }
  if (!("ADMIN" in value) || !validateType(value["ADMIN"], "number")) {
    return false
  }
  return true
}

const validateUser = (value: any) => {
  if (!("id" in value) || !validateType(value["id"], "number")) {
    return false
  }
  if (!("USERNAME" in value) || !validateType(value["USERNAME"], "string")) {
    return false
  }
  if (!("role" in value) || !validateType(value["role"], "Kind")) {
    return false
  }
  if (!("meta" in value) || !validateType(value["meta"], "object")) {
    return false
  }
  if (!("-" in value) || !validateType(value["-"], "number")) {
    return false
  }
  if ("createdAt" in value && !validateType(value["createdAt"], "string")) {
    return false
  }
  return true
}

const validatePage = (value: any) => {
  if (!("num" in value) || !validateType(value["num"], "number")) {
    return false
  }
  return true
}

const validateGetArticleRequest = (value: any) => {
  if (!("articleId" in value) || !validateType(value["articleId"], "number")) {
    return false
  }
  return true
}

const validateGetArticleResponse = (value: any) => {
  if (!("title" in value) || !validateType(value["title"], "string")) {
    return false
  }
  if ("content" in value && !validateType(value["content"], "string")) {
    return false
  }
  return true
}


const TYPE_VALIDATORS: { [type: string]: (value: any) => boolean } = {
  Kind: validateKind,
  User: validateUser,
  Page: validatePage,
  GetArticleRequest: validateGetArticleRequest,
  GetArticleResponse: validateGetArticleResponse,
}

const validateType = (value: any, type: string) => {
  if (JS_TYPES.indexOf(type) > -1) {
    return typeof value === type;
  }
  const validator = TYPE_VALIDATORS[type];
  if (!validator) {
    return false;
  }
  return validator(value);
}

//
// Webrpc
//

export const WebrpcHeader = "Webrpc"

export const WebrpcHeaderValue = "webrpc@v0.28.1-1-ge2b37ad;gen-typescript@unknown;node-ts@v1.0.0"

type WebrpcGenVersions = {
  webrpcGenVersion: string;
  codeGenName: string;
  codeGenVersion: string;
  schemaName: string;
  schemaVersion: string;
};

export function VersionFromHeader(headers: Headers): WebrpcGenVersions {
  const headerValue = headers.get(WebrpcHeader);
  if (!headerValue) {
    return {
      webrpcGenVersion: "",
      codeGenName: "",
      codeGenVersion: "",
      schemaName: "",
      schemaVersion: "",
    };
  }

  return parseWebrpcGenVersions(headerValue);
}

function parseWebrpcGenVersions(header: string): WebrpcGenVersions {
  const versions = header.split(";");
  if (versions.length < 3) {
    return {
      webrpcGenVersion: "",
      codeGenName: "",
      codeGenVersion: "",
      schemaName: "",
      schemaVersion: "",
    };
  }

  const [_, webrpcGenVersion] = versions[0]!.split("@");
  const [codeGenName, codeGenVersion] = versions[1]!.split("@");
  const [schemaName, schemaVersion] = versions[2]!.split("@");

  return {
    webrpcGenVersion: webrpcGenVersion ?? "",
    codeGenName: codeGenName ?? "",
    codeGenVersion: codeGenVersion ?? "",
    schemaName: schemaName ?? "",
    schemaVersion: schemaVersion ?? "",
  };
}
