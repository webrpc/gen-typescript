{{define "client"}}

{{- $typeMap := .TypeMap -}}

{{- if .Services}}
//
// Client
//

{{- range .Services}}
export class {{.Name}} implements {{.Name}} {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/{{.Name}}/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  {{range $_, $method := .Methods}}
  {{firstLetterToLower .Name}} = ({{template "methodInputs" dict "Method" . "TypeMap" $typeMap}}): Promise<{{$method.Name}}Return> => {
    return this.fetch(
      this.url('{{.Name}}'),
      {{- if .Inputs | len}}
      createHTTPRequest(args, headers, signal)
      {{- else}}
      createHTTPRequest({}, headers, signal)
      {{end -}}
    ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
        {{- range $i, $output := .Outputs }}
          {{$output.Name}}: <{{template "type" dict "Type" $output.Type "TypeMap" $typeMap}}>(_data.{{$output.Name}}),
        {{- end -}}
        {{if len .Outputs}}
        {{end}}}
      })
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error.message || ''}` })
    })
  }
  {{end}}
}
{{end -}}
{{end -}}
{{end}}
