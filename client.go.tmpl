{{define "client"}}

{{- $typeMap := .TypeMap -}}
{{- $opts := .Opts -}}

{{- if .Services}}
//
// Client
//

{{- "\n" -}}{{- range .Services}}
export class {{.Name}} implements {{.Name}}Client {
  protected hostname: string
  protected fetch: Fetch
  protected path = '/rpc/{{.Name}}/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname.replace(/\/*$/, '')
    this.fetch = (input: RequestInfo, init?: RequestInit) => fetch(input, init)
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  {{range $_, $method := .Methods}}
  {{firstLetterToLower .Name}} = ({{template "methodInputs" dict "Method" . "Opts" $opts "TypeMap" $typeMap}}): {{if $method.StreamOutput}}WebrpcStreamController{{else}}{{if $method.Succinct}}Promise<{{(index $method.Outputs 0).Type}}>{{else}}Promise<{{$method.Name}}{{if $opts.compat}}Return{{else}}Response{{end}}>{{end}}{{end}} => {
  {{- if $method.StreamOutput }}
    const abortController = new AbortController()
    const abortSignal = abortController.signal

    if (options.signal) {
      abortSignal.addEventListener("abort", () => abortController.abort(options.signal?.reason), {
        signal: options.signal,
      })
    }

    const _fetch = () => this.fetch(this.url('{{.Name}}'),
      {{- if .Inputs | len }}createHttpRequest(req, options.headers, abortSignal){{- else}}createHttpRequest({}, options.headers, options.signal){{end }}
      ).then(async (res) => {
        await sseResponse(res, options, _fetch)
    }, (error) => {
      options.onError(error, _fetch)
    })

    const resp = _fetch()
    return {
      abort: abortController.abort.bind(abortController),
      closed: resp
    };
  }
  {{- else }}
    return this.fetch(
      this.url('{{.Name}}'),
      {{ if .Inputs | len }}createHttpRequest(req, headers, signal)).then((res) => { {{- else }}createHttpRequest({}, headers, signal)
      ).then((res) => { {{- end }}
      {{- if eq $method.Succinct false}}
      return buildResponse(res).then(_data => {
        {{ if .Outputs | len -}}
        return {
        {{- range $i, $output := .Outputs }}
          {{$output.Name}}: <{{template "type" dict "Type" $output.Type "TypeMap" $typeMap}}>(_data.{{$output.Name}}),
        {{- end }}
        }
        {{- else }}return {}{{- end }}
      })
      {{- else -}}
      return buildResponse(res)
      {{- end }}
    }, (error) => {
      throw WebrpcRequestFailedError.new({ cause: `fetch(): ${error instanceof Error ? error.message : String(error)}` })
    })
  }
  {{end -}}
  {{end}}
}
{{- end -}}
{{end -}}
{{if $opts.streaming}}
  {{template "sse"}}
{{end}}
{{- end -}}
